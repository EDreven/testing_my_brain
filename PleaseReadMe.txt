********************************************************************************
******************** Краткое описание о проделанной работе *********************
********************************************************************************

    В первую очередь, то что бросилось в глаза, это множественные точки вЫхода 
из методов. Всегда нужно стремиться к "один вход - один выход" (легче отлавливать
легче отлаЖивать, легче обслуживать, но.. ситуации бывают разные). В данном случае,
для устранения подобной реализации мной была использована конструкция "try{...}catch{...}",
которая, так же как и "if(...)return;" приводила к прерыванию выполнения методов класса и
возвращала необходимые данные, путем выброса исключения, для чего был создан отдельный
класс в виде дампа ошибок, названный "AuthExeption", опираясь на то что он принадлежит
модулю "Auth".

    Второе, что было сделано, это разделение реализованного класса "Auth" на отдельные
сущности. Из реализации явно выделились:
    - User - сущность ответственная за работу с данными пользователя;
    - Session - сущность по работе с сессиями;
    - Request - сущность по работе с... "ответной стороной";
    - Attempt - сущность по работе с отдельной частью учета действий пользователя;
    - Validate - сущность по работе с проверками корректности данных.

    Разумеется подобное разделение абсолютно субъективно, многие вещи до сих пор
и у меня вызывают вопросы, но советоваться было не с кем :). Каждая сущность
была определена в свой собственный класс и отдельный файл для всеобщего удобства.
    При производимом рефакторинге была учтена обратная совместимость с данной
изначально версией реализации. Таким образом были оставлены в составе класса "Auth"
методы, которые были помечены как "public" или "protected", сохраняя во внимании
возможное использование за пределами видимости. Также, для сохранения обратной связи
и обеспечения меньшей зависимости между классами ("является" -> "состоит"), все 
выпиленные в отдельные классы сущности установлены как необзательные параметры 
класса Auth.

    В процессе рефакторинга и более тесного общения с кодом были изменены некоторые...
совсем непонятные вещи (не исключаю, что они были введены специально) в роде этого:
`(0 < count(array_intersect(array(strtolower($username)), $bannedUsernames)))`
замененного на простое: `(in_array(strtolower($username), $bannedUsernames)))`.
Кое где даже встретилось: `"INSERT INTO {$this->config->table_users} VALUES ()"`.
Мало вероятно, что такой запрос выполнится без ошибок.


    Тесты.

    В тестах использвовались примитивные методы обработки логики (tests\ValidateTest.php)
и более сложные для тестиования методов, которые работают с базой данный и с другими
классами, с помощью "Мокков". 
    Добрая часть методов в тестах не нуждается из-за незначительного количаства логики,
думаю и так понятно.
